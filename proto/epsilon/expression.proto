
syntax = "proto3";

message Constant {
  string data_location = 1;
  double scalar = 2;
}

message Variable {
  string variable_id = 1;
}

message Size {
  repeated int32 dim = 1;
}

message Slice {
  int32 start = 1;
  int32 stop = 2;
  int32 step = 3;
}

message Sign {
  enum Type {
    UNKNOWN = 0;
    NEGATIVE = 1;
    POSITIVE = 2;
    ZERO = 3;
  }
  Type sign_type = 1;
}

message Curvature {
  enum Type {
    UNKNOWN = 0;
    AFFINE = 1;
    CONVEX = 2;
    CONCAVE = 3;
    CONSTANT = 4;
  }
  Type curvature_type = 1;

  // Elementwise function, e.g. A .* X
  bool elementwise = 2;
  // Constant multiple, e.g. alpha * X
  bool constant_multiple = 3;
}

message Cone {
  enum Type {
    UNKNOWN = 0;
    ZERO = 1;           // s == 0
    NON_NEGATIVE = 2;   // s >= 0
    SEMI_DEFINITE = 3;  // S >= 0
  }
  Type cone_type = 1;
}

message Expression {
  enum Type {
    // Default value
    UNKNOWN = 0;

    // Indicator (generalized inequality)
    INDICATOR = 1;

    // Leaf nodes
    CONSTANT = 2;
    VARIABLE = 3;

    // Linear operators
    ADD = 4;
    INDEX = 5;
    MULTIPLY = 6;
    MULTIPLY_ELEMENTWISE = 7;
    NEGATE = 8;
    SUM = 9;
    TRANSPOSE = 10;
    HSTACK = 11;
    VSTACK = 12;
    TRACE = 13;
    RESHAPE = 14;

    // Elementwise functions
    ABS = 15;
    POWER = 16;
    SQUARE_ROOT = 17;
    MAX = 18;

    // Vector functions
    NORM_P = 19;

    // Matrix functions
    LOG_DET = 20;
    NORM_PQ = 21;
    NORM_2_ELEMENTWISE = 22;
  }
  Type expression_type = 1;
  Size size = 2;
  repeated Expression arg = 3;

  // DCP attributes
  Sign sign = 4;
  Curvature curvature = 5;

  // CONSTANT, VARIABLE
  Constant constant = 6;
  Variable variable = 7;

  // INDEX
  repeated Slice key = 8;

  // NORM_P, NORM_P_Q and POWER
  double p = 9;
  double q = 10;

  // INDICATOR
  Cone cone = 11;
}

// Arbitrary convex problem of the form
// minimize    f(x)
// subject to  f_i(x) <=_K 0
message Problem {
  // Objective should be scalar-valued, f : R^n -> R
  Expression objective = 1;

  // Constraints can be vector-valued, f_i : R^n -> R^m, and should have
  // expression type INDICATOR
  repeated Expression constraint = 2;
}
